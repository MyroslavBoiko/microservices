server:
  port: ${RESOURCE_SERVICE_PORT:8082}
spring:
  application:
    name: resource-service
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  datasource:
    url: ${DB_CONNECTION_URL:jdbc:postgresql://localhost:5432}/${DB_NAME:resource}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    database: postgresql
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
aws:
  s3:
    url: ${AWS_S3_URL:http://127.0.0.1:4566}
    region: ${AWS_S3_REGION:eu-central-1}
    access-key: ${AWS_S3_ACCESS_KEY:localstack}
    secret-key: ${AWS_S3_SECRET_KEY:localstack}
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8085/eureka}
  instance:
    preferIpAddress: true
url:
  gateway: ${GATEWAY_URL:http://localhost:8086}
storage:
  type:
    staging: 'STAGING'
    permanent: 'PERMANENT'
management:
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: health
  health:
    circuitbreakers:
      enabled: true
resilience4j.circuitbreaker:
  configs:
    shared:
      register-health-indicator: true
      sliding-window-type: count_based
      sliding-window-size: 5
      failure-rate-threshold: 40
      slow-call-rate-threshold: 40
      permitted-number-of-calls-in-half-open-state: 1
      max-wait-duration-in-half-open-state: 10s
      wait-duration-in-open-state: 10s
      slow-call-duration-threshold: 2s
      writable-stack-trace-enabled: true
      automatic-transition-from-open-to-half-open-enabled: true
  instances:
    staging:
      base-config: shared
    permanent:
      base-config: shared
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"