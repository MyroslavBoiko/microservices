version: '3.8'

services:
  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    environment:
      - DEBUG=1
      - USE_SSL=0
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME=localstack
      - SERVICES=s3
      - AWS_DEFAULT_REGION=eu-central-1
      - DATA_DIR=/tmp/localstack/data
    ports:
      - '4566-4583:4566-4583'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./script/localstack/s3/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
    networks:
      default:
        aliases:
          - s3.localhost.localstack.cloud
          - ${AWS_S3_BUCKET_STAGING}.s3.localhost.localstack.cloud
          - ${AWS_S3_BUCKET_PERMANENT}.s3.localhost.localstack.cloud
  resource_db:
    container_name: resource_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=resource
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5434:5432'
    volumes:
      - ./db-data/resource/:/var/lib/postgresql/data/
      - ./script/resource/sql:/docker-entrypoint-initdb.d/
  songs_db:
    container_name: songs_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=songs
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5435:5432'
    volumes:
      - ./db-data/songs/:/var/lib/postgresql/data/
      - ./script/songs/sql:/docker-entrypoint-initdb.d/
  storage_db:
    container_name: storage_db
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=storage
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5436:5432'
    volumes:
      - ./db-data/storage/:/var/lib/postgresql/data/
      - ./script/storage/sql:/docker-entrypoint-initdb.d/
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  resource:
    container_name: resource
    image: microservices/resource-service:v1
    build: '../resource-service/'
    ports:
      - '8082:8080'
    environment:
      - DB_CONNECTION_URL=${RESOURCE_DB_URL}
      - DB_NAME=${RESOURCE_DB_NAME}
      - DB_USERNAME=${RESOURCE_DB_USER}
      - DB_PASSWORD=${RESOURCE_DB_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - AWS_S3_URL=${AWS_S3_URL}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_KEY=${AWS_S3_SECRET_KEY}
      - EUREKA_URI=${EUREKA_URI}
      - RESOURCE_SERVICE_PORT=${RESOURCE_SERVICE_PORT}
      - GATEWAY_URL=${GATEWAY_URL}
    depends_on:
      - localstack
      - broker
      - resource_db
      - service-registry
      - gateway
  songs:
    container_name: songs
    image: microservices/song-service:v1
    build: '../song-service/'
    ports:
      - '8081:8080'
    environment:
      - DB_CONNECTION_URL=${SONGS_DB_URL}
      - DB_NAME=${SONGS_DB_NAME}
      - DB_USERNAME=${SONGS_DB_USER}
      - DB_PASSWORD=${SONGS_DB_PASSWORD}
      - EUREKA_URI=${EUREKA_URI}
      - SONG_SERVICE_PORT=${SONG_SERVICE_PORT}
    depends_on:
      - songs_db
      - service-registry
      - gateway
  processor:
    container_name: processor
    image: microservices/resource-processor:v1
    build: '../resource-processor/'
    ports:
      - '8083:8080'
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - SONG_SERVICE_URL=${SONG_SERVICE_URL}
      - RESOURCE_SERVICE_URL=${RESOURCE_SERVICE_URL}
      - EUREKA_URI=${EUREKA_URI}
      - RESOURCE_PROCESSOR_PORT=${RESOURCE_PROCESSOR_PORT}
      - CLIENT_SIDE_LOAD_BALANCING=${CLIENT_SIDE_LOAD_BALANCING}
      - GATEWAY_URL=${GATEWAY_URL}
    depends_on:
      - broker
      - service-registry
      - gateway
  storage:
    container_name: storage
    image: microservices/storage-service:v1
    build: '../storage-service/'
    ports:
      - '8084:8080'
    environment:
      - DB_CONNECTION_URL=${STORAGE_DB_URL}
      - DB_NAME=${STORAGE_DB_NAME}
      - DB_USERNAME=${STORAGE_DB_USER}
      - DB_PASSWORD=${STORAGE_DB_PASSWORD}
      - EUREKA_URI=${EUREKA_URI}
      - STORAGE_SERVICE_PORT=${STORAGE_SERVICE_PORT}
    depends_on:
      - storage_db
      - service-registry
      - gateway
  service-registry:
    container_name: service-registry
    image: microservices/service-registry:v1
    build: '../service-registry/'
    ports:
      - '8085:8085'
    environment:
      - EUREKA_URI=${EUREKA_URI}
  gateway:
    container_name: gateway
    image: microservices/gateway:v1
    build: '../gateway/'
    ports:
      - '8086:8086'
    environment:
      - EUREKA_URI=${EUREKA_URI}
    depends_on:
      - service-registry
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
    container_name: elasticsearch_springboot
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.1
    container_name: kibana_springboot
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.1
    container_name: logstash_springboot
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:9.5.2
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=localhost
volumes:
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local